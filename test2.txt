To display real-time stock prices and changes for multiple companies on a single page in Django using yfinance, you can use a combination of HTML, JavaScript, and Django's built-in template system. Here are the general steps you can follow:

1. Install yfinance by running `pip install yfinance` in your terminal.

2. Create a Django view that fetches the current stock prices and changes for each company and renders a template with that data. You can use the yfinance library for this.

3. In the template, use JavaScript to periodically (e.g. every 5 seconds) make an AJAX request to another Django view that returns the updated stock prices and changes for each company. You can use the jQuery library to make the AJAX request.

4. Use JavaScript to update the HTML on the page with the new stock prices and changes.

Here's some sample code that demonstrates this approach:

1. views.py

import yfinance as yf
from django.shortcuts import render
from django.http import JsonResponse

def stocks(request):
    companies = ['AAPL', 'GOOG', 'MSFT']  # Replace with your list of companies
    data = {}
    for company in companies:
        stock = yf.Ticker(company)
        data[company] = {
            'price': stock.info['regularMarketPrice'],
            'change': stock.info['regularMarketChange'],
        }
    return render(request, 'stocks.html', {'data': data})

def stocks_data(request):
    companies = ['AAPL', 'GOOG', 'MSFT']  # Replace with your list of companies
    data = {}
    for company in companies:
        stock = yf.Ticker(company)
        data[company] = {
            'price': stock.info['regularMarketPrice'],
            'change': stock.info['regularMarketChange'],
        }
    return JsonResponse(data)


2. stocks.html

{% extends 'base.html' %}

{% block content %}
  <h1>Stocks</h1>
  <table>
    <thead>
      <tr>
        <th>Company</th>
        <th>Price</th>
        <th>Change</th>
      </tr>
    </thead>
    <tbody id="stocks-data">
      {% for company, stock in data.items %}
        <tr>
          <td>{{ company }}</td>
          <td>{{ stock.price }}</td>
          <td>{{ stock.change }}</td>
        </tr>
      {% endfor %}
    </tbody>
  </table>
{% endblock %}

{% block scripts %}
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script>
    function updateStocks() {
      $.ajax({
        url: '{% url "stocks_data" %}',
        success: function(data) {
          Object.keys(data).forEach(function(company) {
            var row = $('#stocks-data tr').filter(function() {
              return $(this).find('td:first-child').text() === company;
            });
            row.find('td:nth-child(2)').text(data[company].price);
            row.find('td:nth-child(3)').text(data[company].change);
          });
        }
      });
    }
    setInterval(updateStocks, 5000);
  </script>
{% endblock %}


3. urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('stocks/', views.stocks, name='stocks'),
    path('stocks/data/', views.stocks_data, name='stocks_data'),
]


Note: This is just a basic example to get you started. You will need to modify it to fit your specific needs, such as customizing the HTML and CSS, and adding error handling.


To display the real-time stock prices for multiple companies on a single page using Django and yfinance, you can modify the stock_prices view to use a background task to periodically update the stock prices and push the updated data to the template using Django's AsyncWebsocketConsumer. Here's an example:

Install the required libraries:
pip install channels channels_redis
Update your Django settings to include the channels app and configure the ASGI_APPLICATION setting:
INSTALLED_APPS = [
    # ...
    'channels',
    # ...
]

ASGI_APPLICATION = 'myproject.routing.application'
Create a new file called routing.py in your project directory with the following contents:
from django.urls import re_path
from channels.routing import ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack
from myapp.consumers import StockConsumer

application = ProtocolTypeRouter({
    "websocket": AuthMiddlewareStack(
        URLRouter([
            re_path('ws/stocks/$', StockConsumer.as_asgi()),
        ])
    ),
})
Create a new file called consumers.py in your app directory with the following contents:
import asyncio
import json
import yfinance as yf
from channels.generic.websocket import AsyncWebsocketConsumer

class StockConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        await self.accept()

        self.tickers = ['AAPL', 'GOOG', 'MSFT'] # Replace with your own list of tickers
        self.interval = 5 # Update interval in seconds

        while True:
            await asyncio.sleep(self.interval)
            stocks = []
            for ticker in self.tickers:
                try:
                    stock = yf.Ticker(ticker)
                    price = stock.info['regularMarketPrice']
                    change = stock.info['regularMarketChangePercent']
                    stocks.append({
                        'symbol': ticker,
                        'price': price,
                        'change': change
                    })
                except Exception as e:
                    stocks.append({
                        'symbol': ticker,
                        'error_message': str(e)
                    })

            await self.send(text_data=json.dumps({
                'type': 'stock_data',
                'data': stocks
            }))
Update your views.py file to render the stock_prices.html template:
from django.shortcuts import render

def stock_prices(request):
    return render(request, 'stock_prices.html')
Create a new file called stock_prices.html in your app's templates directory with the following contents:
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Real-Time Stock Prices</title>
</head>
<body>
    <h1>Real-Time Stock Prices</h1>
    <table>
        <thead>
            <tr>
                <th>Symbol</th>
                <th>Price</th>
                <th>Change</th>
            </tr>
        </thead>
        <tbody id="stock-table-body">
        </tbody>
    </table>

    <script>
        const socket = new WebSocket('ws://' + window.location.host + '/ws/stocks/');

        socket.onmessage = function(event) {
            const message = JSON.parse(event.data);

            if (message.type === 'stock_data') {
                const stocks = message.data;

                const stockTableBody = document.getElementById('stock-table-body');
                stockTableBody.innerHTML = '';

                for (let i = 0; i < stocks.length; i++) {
                    const stock = stocks[i];

                    const row = document.createElement('tr');

                    const symbolCell = document.createElement('td');
                    symbolCell.textContent = stock.symbol;
                    row.appendChild(symbolCell);

                    const priceCell = document.createElement('td');
                    priceCell.textContent = stock.price;
                    row.appendChild(priceCell);

                    const changeCell = document.createElement('td');
                    changeCell.textContent = stock.change + '%';
                    row.appendChild(changeCell);

                    stockTableBody.appendChild(row);
                }
            }
        };
    </script>
</body>
</html>
Update your urls.py file to include a URL pattern for the stock_prices view:
from django.urls import path
from .views import stock_prices

urlpatterns = [
    path('stock-prices/', stock_prices, name='stock_prices'),
    # ...
]
Now, when you visit the stock-prices URL, you should see a table of real-time stock prices for the tickers specified in the StockConsumer class. The table will automatically update every 5 seconds with the latest data.

"""{'address1': '1600 Amphitheatre Parkway',
'city': 'Mountain View',
'state': 'CA', 
'zip': '94043', 
'country': 'United States',
'phone': '650 253 0000',
'website': 'https://www.abc.xyz', 
'industry': 'Internet Content & Information',
'sector': 'Communication Services', 
'longBusinessSummary': 'Alphabet Inc. offers various products and platforms in the United States, Europe, the Middle East, Africa, the Asia-Pacific, Canada, and Latin America. It operates through Google Services, Google Cloud, and Other Bets segments. The Google Services segment provides products and services, including ads, Android, Chrome, hardware, Gmail, Google Drive, Google Maps, Google Photos, Google Play, Search, and YouTube. It is also involved in the sale of apps and in-app purchases and digital content in the Google Play store; and Fitbit wearable devices, Google Nest home products, Pixel phones, and other devices, as well as in the provision of YouTube non-advertising services. The Google Cloud segment offers infrastructure, cybersecurity, data, analytics, AI, and machine learning, and other services; Google Workspace that include cloud-based collaboration tools for enterprises, such as Gmail, Docs, Drive, Calendar, and Meet; and other services for enterprise customers. The Other Bets segment sells health technology and internet services. The company was founded in 1998 and is headquartered in Mountain View, California.',
'fullTimeEmployees': 190234,
'companyOfficers': [{'maxAge': 1, 'name': 'Mr. Sundar  Pichai', 'age': 49, 'title': 'CEO & Director', 'yearBorn': 1973, 'fiscalYear': 2021, 'totalPay': 6322599, 'exercisedValue': 0, 'unexercisedValue': 44544452}, {'maxAge': 1, 'name': 'Mr. Lawrence Edward Page', 'age': 49, 'title': 'Co-Founder & Director', 'yearBorn': 1973, 'fiscalYear': 2021, 'totalPay': 1, 'exercisedValue': 0, 'unexercisedValue': 0}, {'maxAge': 1, 'name': 'Mr. Sergey  Brin', 'age': 48, 'title': 'Co-Founder & Director', 'yearBorn': 1974, 'fiscalYear': 2021, 'totalPay': 1, 'exercisedValue': 0, 'unexercisedValue': 0}, {'maxAge': 1, 'name': 'Ms. Ruth M. Porat', 'age': 64, 'title': 'Sr. VP & CFO', 'yearBorn': 1958, 'fiscalYear': 2021, 'totalPay': 667411, 'exercisedValue': 0, 'unexercisedValue': 0}, {'maxAge': 1, 'name': 'Mr. J. Kent Walker', 'age': 61, 'title': 'Pres of Global Affairs, Chief Legal Officer & Company Sec.', 'yearBorn': 1961, 'fiscalYear': 2021, 'totalPay': 662697, 'exercisedValue': 0, 'unexercisedValue': 0}, {'maxAge': 1, 'name': 'Dr. Prabhakar  Raghavan', 'age': 61, 'title': 'Sr. VP of Knowledge and Information - Google', 'yearBorn': 1961, 'fiscalYear': 2021, 'totalPay': 663643, 'exercisedValue': 0, 'unexercisedValue': 0}, {'maxAge': 1, 'name': 'Mr. Philipp  Schindler', 'age': 51, 'title': 'Sr. VP & Chief Bus. Officer of Google', 'yearBorn': 1971, 'fiscalYear': 2021, 'totalPay': 677617, 'exercisedValue': 0, 'unexercisedValue': 0}, {'maxAge': 1, 'name': "Ms. Amie Thuener O'Toole", 'age': 47, 'title': 'Chief Accounting Officer & VP', 'yearBorn': 1975, 'exercisedValue': 0, 'unexercisedValue': 0}, {'maxAge': 1, 'name': 'Ms. Ellen  West', 'title': 'VP of Investor Relations', 'exercisedValue': 0, 'unexercisedValue': 0}, {'maxAge': 1, 'name': 'Ms. Fiona Clare Cicconi', 'age': 56, 'title': 'Chief People Officer', 'yearBorn': 1966, 'exercisedValue': 0, 'unexercisedValue': 0}],
'auditRisk': 6,
'boardRisk': 2,
'compensationRisk': 8,
'shareHolderRightsRisk': 10,
'overallRisk': 10,
'governanceEpochDate': 1680307200,
'compensationAsOfEpochDate': 1640908800,
'maxAge': 86400,
'priceHint': 2, 
'previousClose': 108.19,
'open': 107.69,
'dayLow': 107.59,
'dayHigh': 109.575,
'regularMarketPreviousClose': 108.19,
'regularMarketOpen': 107.69,
'regularMarketDayLow': 107.59,
'regularMarketDayHigh': 109.575,
'payoutRatio': 0.0, 
'beta': 1.099653,
'trailingPE': 23.744034, 
'forwardPE': 18.092562,
'volume': 20758686,
'regularMarketVolume': 20758686,
'averageVolume': 32354155,
'averageVolume10days': 22935250,
'averageDailyVolume10Day': 22935250,
'bid': 0.0,
'ask': 0.0,
'bidSize': 1100,
'askSize': 1200,
'marketCap': 1397815115776,
'fiftyTwoWeekLow': 83.45,
'fiftyTwoWeekHigh': 131.9235,
'priceToSalesTrailing12Months': 4.94214,
'fiftyDayAverage': 99.2922,
'twoHundredDayAverage': 101.63476,
'trailingAnnualDividendRate': 0.0,
'trailingAnnualDividendYield': 0.0,
'currency': 'USD',
'enterpriseValue': 1318069207040,
'profitMargins': 0.21204,
'floatShares': 11065504140,
'sharesOutstanding': 5968000000, 
'sharesShort': 29937248,
'sharesShortPriorMonth': 30190230,
'sharesShortPreviousMonthDate': 1677542400,
'dateShortInterest': 1680220800,
'sharesPercentSharesOut': 0.0023,
'heldPercentInsiders': 0.00014999999,
'heldPercentInstitutions': 0.63293,
'shortRatio': 0.95,
'impliedSharesOutstanding': 0,
'bookValue': 19.935,
'priceToBook': 5.490845,
'lastFiscalYearEnd': 1672444800,
'nextFiscalYearEnd': 1703980800,
'mostRecentQuarter': 1672444800,
'earningsQuarterlyGrowth': -0.34,
'netIncomeToCommon': 59972001792,
'trailingEps': 4.61,
'forwardEps': 6.05,
'pegRatio': 1.32,
'lastSplitFactor': '20:1',
'lastSplitDate': 1658102400,
'enterpriseToRevenue': 4.66,
'enterpriseToEbitda': 14.521,
'52WeekChange': -0.1445831,
'SandP52WeekChange': -0.057847917,
'exchange': 'NMS',
'quoteType': 'EQUITY',
'symbol': 'GOOG',
'underlyingSymbol': 'GOOG',
'shortName': 'Alphabet Inc.',
'longName': 'Alphabet Inc.',
'firstTradeDateEpochUtc': 1092922200,
'timeZoneFullName': 'America/New_York',
'timeZoneShortName': 'EDT',
'uuid': 'ee8cce8c-2475-31c0-8436-ecdf889cbfbd',
'messageBoardId': 'finmb_29096',
'gmtOffSetMilliseconds': -14400000,
'currentPrice': 109.46,
'targetHighPrice': 135.0,
'targetLowPrice': 119.0,
'targetMeanPrice': 125.11,
'targetMedianPrice': 123.0,
'recommendationMean': 1.5,
'recommendationKey': 'strong_buy',
'numberOfAnalystOpinions': 9,
'totalCash': 113762000896,
'totalCashPerShare': 8.883,
'ebitda': 90770997248,
'totalDebt': 29976999936,
'quickRatio': 2.223,
'currentRatio': 2.378,
'totalRevenue': 282836008960,
'debtToEquity': 11.703,
'revenuePerShare': 21.652,
'returnOnAssets': 0.12911999,
'returnOnEquity': 0.23621,
'grossProfits': 156633000000,
'freeCashflow': 52531126272,
'operatingCashflow': 91494998016,
'earningsGrowth': -0.314,
'revenueGrowth': 0.01,
'grossMargins': 0.55379003,
'ebitdaMargins': 0.32092997,
'operatingMargins': 0.26461,
'financialCurrency': 'USD',
'trailingPegRatio': 1.162}
"""
